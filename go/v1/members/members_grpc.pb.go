// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package members

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// MembersServiceClient is the client API for MembersService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MembersServiceClient interface {
	GetById(ctx context.Context, in *GetMemberByIdRequest, opts ...grpc.CallOption) (*GetMemberResponse, error)
	GetByEmail(ctx context.Context, in *GetMemberByEmailRequest, opts ...grpc.CallOption) (*GetMemberResponse, error)
	GetByNationalIdentifier(ctx context.Context, in *GetMemberByNationalIdentifierRequest, opts ...grpc.CallOption) (*GetMemberResponse, error)
	List(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error)
	Create(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*CreateMemberResponse, error)
	Update(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*UpdateMemberResponse, error)
	Delete(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error)
}

type membersServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMembersServiceClient(cc grpc.ClientConnInterface) MembersServiceClient {
	return &membersServiceClient{cc}
}

func (c *membersServiceClient) GetById(ctx context.Context, in *GetMemberByIdRequest, opts ...grpc.CallOption) (*GetMemberResponse, error) {
	out := new(GetMemberResponse)
	err := c.cc.Invoke(ctx, "/uptown_runners.members.v1.MembersService/GetById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) GetByEmail(ctx context.Context, in *GetMemberByEmailRequest, opts ...grpc.CallOption) (*GetMemberResponse, error) {
	out := new(GetMemberResponse)
	err := c.cc.Invoke(ctx, "/uptown_runners.members.v1.MembersService/GetByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) GetByNationalIdentifier(ctx context.Context, in *GetMemberByNationalIdentifierRequest, opts ...grpc.CallOption) (*GetMemberResponse, error) {
	out := new(GetMemberResponse)
	err := c.cc.Invoke(ctx, "/uptown_runners.members.v1.MembersService/GetByNationalIdentifier", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) List(ctx context.Context, in *GetMembersRequest, opts ...grpc.CallOption) (*GetMembersResponse, error) {
	out := new(GetMembersResponse)
	err := c.cc.Invoke(ctx, "/uptown_runners.members.v1.MembersService/List", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) Create(ctx context.Context, in *CreateMemberRequest, opts ...grpc.CallOption) (*CreateMemberResponse, error) {
	out := new(CreateMemberResponse)
	err := c.cc.Invoke(ctx, "/uptown_runners.members.v1.MembersService/Create", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) Update(ctx context.Context, in *UpdateMemberRequest, opts ...grpc.CallOption) (*UpdateMemberResponse, error) {
	out := new(UpdateMemberResponse)
	err := c.cc.Invoke(ctx, "/uptown_runners.members.v1.MembersService/Update", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *membersServiceClient) Delete(ctx context.Context, in *DeleteMemberRequest, opts ...grpc.CallOption) (*DeleteMemberResponse, error) {
	out := new(DeleteMemberResponse)
	err := c.cc.Invoke(ctx, "/uptown_runners.members.v1.MembersService/Delete", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MembersServiceServer is the server API for MembersService service.
// All implementations must embed UnimplementedMembersServiceServer
// for forward compatibility
type MembersServiceServer interface {
	GetById(context.Context, *GetMemberByIdRequest) (*GetMemberResponse, error)
	GetByEmail(context.Context, *GetMemberByEmailRequest) (*GetMemberResponse, error)
	GetByNationalIdentifier(context.Context, *GetMemberByNationalIdentifierRequest) (*GetMemberResponse, error)
	List(context.Context, *GetMembersRequest) (*GetMembersResponse, error)
	Create(context.Context, *CreateMemberRequest) (*CreateMemberResponse, error)
	Update(context.Context, *UpdateMemberRequest) (*UpdateMemberResponse, error)
	Delete(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error)
	mustEmbedUnimplementedMembersServiceServer()
}

// UnimplementedMembersServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMembersServiceServer struct {
}

func (UnimplementedMembersServiceServer) GetById(context.Context, *GetMemberByIdRequest) (*GetMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetById not implemented")
}
func (UnimplementedMembersServiceServer) GetByEmail(context.Context, *GetMemberByEmailRequest) (*GetMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByEmail not implemented")
}
func (UnimplementedMembersServiceServer) GetByNationalIdentifier(context.Context, *GetMemberByNationalIdentifierRequest) (*GetMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetByNationalIdentifier not implemented")
}
func (UnimplementedMembersServiceServer) List(context.Context, *GetMembersRequest) (*GetMembersResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedMembersServiceServer) Create(context.Context, *CreateMemberRequest) (*CreateMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}
func (UnimplementedMembersServiceServer) Update(context.Context, *UpdateMemberRequest) (*UpdateMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Update not implemented")
}
func (UnimplementedMembersServiceServer) Delete(context.Context, *DeleteMemberRequest) (*DeleteMemberResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Delete not implemented")
}
func (UnimplementedMembersServiceServer) mustEmbedUnimplementedMembersServiceServer() {}

// UnsafeMembersServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MembersServiceServer will
// result in compilation errors.
type UnsafeMembersServiceServer interface {
	mustEmbedUnimplementedMembersServiceServer()
}

func RegisterMembersServiceServer(s grpc.ServiceRegistrar, srv MembersServiceServer) {
	s.RegisterService(&MembersService_ServiceDesc, srv)
}

func _MembersService_GetById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberByIdRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).GetById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uptown_runners.members.v1.MembersService/GetById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).GetById(ctx, req.(*GetMemberByIdRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_GetByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberByEmailRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).GetByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uptown_runners.members.v1.MembersService/GetByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).GetByEmail(ctx, req.(*GetMemberByEmailRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_GetByNationalIdentifier_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMemberByNationalIdentifierRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).GetByNationalIdentifier(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uptown_runners.members.v1.MembersService/GetByNationalIdentifier",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).GetByNationalIdentifier(ctx, req.(*GetMemberByNationalIdentifierRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMembersRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uptown_runners.members.v1.MembersService/List",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).List(ctx, req.(*GetMembersRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uptown_runners.members.v1.MembersService/Create",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).Create(ctx, req.(*CreateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_Update_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).Update(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uptown_runners.members.v1.MembersService/Update",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).Update(ctx, req.(*UpdateMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MembersService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteMemberRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MembersServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uptown_runners.members.v1.MembersService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MembersServiceServer).Delete(ctx, req.(*DeleteMemberRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// MembersService_ServiceDesc is the grpc.ServiceDesc for MembersService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MembersService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uptown_runners.members.v1.MembersService",
	HandlerType: (*MembersServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetById",
			Handler:    _MembersService_GetById_Handler,
		},
		{
			MethodName: "GetByEmail",
			Handler:    _MembersService_GetByEmail_Handler,
		},
		{
			MethodName: "GetByNationalIdentifier",
			Handler:    _MembersService_GetByNationalIdentifier_Handler,
		},
		{
			MethodName: "List",
			Handler:    _MembersService_List_Handler,
		},
		{
			MethodName: "Create",
			Handler:    _MembersService_Create_Handler,
		},
		{
			MethodName: "Update",
			Handler:    _MembersService_Update_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _MembersService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "v1/members.proto",
}

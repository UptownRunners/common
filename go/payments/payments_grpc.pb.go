// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package payments

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PaymentsServiceClient is the client API for PaymentsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PaymentsServiceClient interface {
	CreateSwishMobilePayment(ctx context.Context, in *CreateSwishPaymentRequest, opts ...grpc.CallOption) (*CreateSwishMobilePaymentResponse, error)
	CreateSwishWebPayment(ctx context.Context, in *CreateSwishPaymentRequest, opts ...grpc.CallOption) (*CreateSwishWebPaymentResponse, error)
	GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*Payment, error)
	GetPaymentUpdates(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (PaymentsService_GetPaymentUpdatesClient, error)
}

type paymentsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPaymentsServiceClient(cc grpc.ClientConnInterface) PaymentsServiceClient {
	return &paymentsServiceClient{cc}
}

func (c *paymentsServiceClient) CreateSwishMobilePayment(ctx context.Context, in *CreateSwishPaymentRequest, opts ...grpc.CallOption) (*CreateSwishMobilePaymentResponse, error) {
	out := new(CreateSwishMobilePaymentResponse)
	err := c.cc.Invoke(ctx, "/uptown_runners.payments.v1.PaymentsService/CreateSwishMobilePayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) CreateSwishWebPayment(ctx context.Context, in *CreateSwishPaymentRequest, opts ...grpc.CallOption) (*CreateSwishWebPaymentResponse, error) {
	out := new(CreateSwishWebPaymentResponse)
	err := c.cc.Invoke(ctx, "/uptown_runners.payments.v1.PaymentsService/CreateSwishWebPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) GetPayment(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (*Payment, error) {
	out := new(Payment)
	err := c.cc.Invoke(ctx, "/uptown_runners.payments.v1.PaymentsService/GetPayment", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *paymentsServiceClient) GetPaymentUpdates(ctx context.Context, in *GetPaymentRequest, opts ...grpc.CallOption) (PaymentsService_GetPaymentUpdatesClient, error) {
	stream, err := c.cc.NewStream(ctx, &PaymentsService_ServiceDesc.Streams[0], "/uptown_runners.payments.v1.PaymentsService/GetPaymentUpdates", opts...)
	if err != nil {
		return nil, err
	}
	x := &paymentsServiceGetPaymentUpdatesClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PaymentsService_GetPaymentUpdatesClient interface {
	Recv() (*Payment, error)
	grpc.ClientStream
}

type paymentsServiceGetPaymentUpdatesClient struct {
	grpc.ClientStream
}

func (x *paymentsServiceGetPaymentUpdatesClient) Recv() (*Payment, error) {
	m := new(Payment)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PaymentsServiceServer is the server API for PaymentsService service.
// All implementations must embed UnimplementedPaymentsServiceServer
// for forward compatibility
type PaymentsServiceServer interface {
	CreateSwishMobilePayment(context.Context, *CreateSwishPaymentRequest) (*CreateSwishMobilePaymentResponse, error)
	CreateSwishWebPayment(context.Context, *CreateSwishPaymentRequest) (*CreateSwishWebPaymentResponse, error)
	GetPayment(context.Context, *GetPaymentRequest) (*Payment, error)
	GetPaymentUpdates(*GetPaymentRequest, PaymentsService_GetPaymentUpdatesServer) error
	mustEmbedUnimplementedPaymentsServiceServer()
}

// UnimplementedPaymentsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPaymentsServiceServer struct {
}

func (UnimplementedPaymentsServiceServer) CreateSwishMobilePayment(context.Context, *CreateSwishPaymentRequest) (*CreateSwishMobilePaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwishMobilePayment not implemented")
}
func (UnimplementedPaymentsServiceServer) CreateSwishWebPayment(context.Context, *CreateSwishPaymentRequest) (*CreateSwishWebPaymentResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateSwishWebPayment not implemented")
}
func (UnimplementedPaymentsServiceServer) GetPayment(context.Context, *GetPaymentRequest) (*Payment, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetPayment not implemented")
}
func (UnimplementedPaymentsServiceServer) GetPaymentUpdates(*GetPaymentRequest, PaymentsService_GetPaymentUpdatesServer) error {
	return status.Errorf(codes.Unimplemented, "method GetPaymentUpdates not implemented")
}
func (UnimplementedPaymentsServiceServer) mustEmbedUnimplementedPaymentsServiceServer() {}

// UnsafePaymentsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PaymentsServiceServer will
// result in compilation errors.
type UnsafePaymentsServiceServer interface {
	mustEmbedUnimplementedPaymentsServiceServer()
}

func RegisterPaymentsServiceServer(s grpc.ServiceRegistrar, srv PaymentsServiceServer) {
	s.RegisterService(&PaymentsService_ServiceDesc, srv)
}

func _PaymentsService_CreateSwishMobilePayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwishPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).CreateSwishMobilePayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uptown_runners.payments.v1.PaymentsService/CreateSwishMobilePayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).CreateSwishMobilePayment(ctx, req.(*CreateSwishPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_CreateSwishWebPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateSwishPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).CreateSwishWebPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uptown_runners.payments.v1.PaymentsService/CreateSwishWebPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).CreateSwishWebPayment(ctx, req.(*CreateSwishPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_GetPayment_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPaymentRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PaymentsServiceServer).GetPayment(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/uptown_runners.payments.v1.PaymentsService/GetPayment",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PaymentsServiceServer).GetPayment(ctx, req.(*GetPaymentRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _PaymentsService_GetPaymentUpdates_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(GetPaymentRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PaymentsServiceServer).GetPaymentUpdates(m, &paymentsServiceGetPaymentUpdatesServer{stream})
}

type PaymentsService_GetPaymentUpdatesServer interface {
	Send(*Payment) error
	grpc.ServerStream
}

type paymentsServiceGetPaymentUpdatesServer struct {
	grpc.ServerStream
}

func (x *paymentsServiceGetPaymentUpdatesServer) Send(m *Payment) error {
	return x.ServerStream.SendMsg(m)
}

// PaymentsService_ServiceDesc is the grpc.ServiceDesc for PaymentsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PaymentsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "uptown_runners.payments.v1.PaymentsService",
	HandlerType: (*PaymentsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateSwishMobilePayment",
			Handler:    _PaymentsService_CreateSwishMobilePayment_Handler,
		},
		{
			MethodName: "CreateSwishWebPayment",
			Handler:    _PaymentsService_CreateSwishWebPayment_Handler,
		},
		{
			MethodName: "GetPayment",
			Handler:    _PaymentsService_GetPayment_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "GetPaymentUpdates",
			Handler:       _PaymentsService_GetPaymentUpdates_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "v1/payments.proto",
}

// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: members/v1/members.proto

package members

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// Validate checks the field values on GetMemberByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMemberByIdRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemberByIdRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMemberByIdRequestMultiError, or nil if none found.
func (m *GetMemberByIdRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemberByIdRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if len(errors) > 0 {
		return GetMemberByIdRequestMultiError(errors)
	}
	return nil
}

// GetMemberByIdRequestMultiError is an error wrapping multiple validation
// errors returned by GetMemberByIdRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMemberByIdRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemberByIdRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemberByIdRequestMultiError) AllErrors() []error { return m }

// GetMemberByIdRequestValidationError is the validation error returned by
// GetMemberByIdRequest.Validate if the designated constraints aren't met.
type GetMemberByIdRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemberByIdRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemberByIdRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemberByIdRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemberByIdRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemberByIdRequestValidationError) ErrorName() string {
	return "GetMemberByIdRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMemberByIdRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemberByIdRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemberByIdRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemberByIdRequestValidationError{}

// Validate checks the field values on GetMemberByEmailRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMemberByEmailRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemberByEmailRequest with the
// rules defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMemberByEmailRequestMultiError, or nil if none found.
func (m *GetMemberByEmailRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemberByEmailRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Email

	if len(errors) > 0 {
		return GetMemberByEmailRequestMultiError(errors)
	}
	return nil
}

// GetMemberByEmailRequestMultiError is an error wrapping multiple validation
// errors returned by GetMemberByEmailRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMemberByEmailRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemberByEmailRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemberByEmailRequestMultiError) AllErrors() []error { return m }

// GetMemberByEmailRequestValidationError is the validation error returned by
// GetMemberByEmailRequest.Validate if the designated constraints aren't met.
type GetMemberByEmailRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemberByEmailRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemberByEmailRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemberByEmailRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemberByEmailRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemberByEmailRequestValidationError) ErrorName() string {
	return "GetMemberByEmailRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMemberByEmailRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemberByEmailRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemberByEmailRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemberByEmailRequestValidationError{}

// Validate checks the field values on GetMemberByNationalIdentifierRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the first error encountered is returned, or nil if
// there are no violations.
func (m *GetMemberByNationalIdentifierRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemberByNationalIdentifierRequest
// with the rules defined in the proto definition for this message. If any
// rules are violated, the result is a list of violation errors wrapped in
// GetMemberByNationalIdentifierRequestMultiError, or nil if none found.
func (m *GetMemberByNationalIdentifierRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemberByNationalIdentifierRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for NationalIdentifier

	if len(errors) > 0 {
		return GetMemberByNationalIdentifierRequestMultiError(errors)
	}
	return nil
}

// GetMemberByNationalIdentifierRequestMultiError is an error wrapping multiple
// validation errors returned by
// GetMemberByNationalIdentifierRequest.ValidateAll() if the designated
// constraints aren't met.
type GetMemberByNationalIdentifierRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemberByNationalIdentifierRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemberByNationalIdentifierRequestMultiError) AllErrors() []error { return m }

// GetMemberByNationalIdentifierRequestValidationError is the validation error
// returned by GetMemberByNationalIdentifierRequest.Validate if the designated
// constraints aren't met.
type GetMemberByNationalIdentifierRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemberByNationalIdentifierRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemberByNationalIdentifierRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemberByNationalIdentifierRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemberByNationalIdentifierRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemberByNationalIdentifierRequestValidationError) ErrorName() string {
	return "GetMemberByNationalIdentifierRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMemberByNationalIdentifierRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemberByNationalIdentifierRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemberByNationalIdentifierRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemberByNationalIdentifierRequestValidationError{}

// Validate checks the field values on GetMembersRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMembersRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMembersRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMembersRequestMultiError, or nil if none found.
func (m *GetMembersRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMembersRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Skip

	// no validation rules for Take

	if len(errors) > 0 {
		return GetMembersRequestMultiError(errors)
	}
	return nil
}

// GetMembersRequestMultiError is an error wrapping multiple validation errors
// returned by GetMembersRequest.ValidateAll() if the designated constraints
// aren't met.
type GetMembersRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMembersRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMembersRequestMultiError) AllErrors() []error { return m }

// GetMembersRequestValidationError is the validation error returned by
// GetMembersRequest.Validate if the designated constraints aren't met.
type GetMembersRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMembersRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMembersRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMembersRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMembersRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMembersRequestValidationError) ErrorName() string {
	return "GetMembersRequestValidationError"
}

// Error satisfies the builtin error interface
func (e GetMembersRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMembersRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMembersRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMembersRequestValidationError{}

// Validate checks the field values on CreateMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMemberRequestMultiError, or nil if none found.
func (m *CreateMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetNationalIdentifier()) < 1 {
		err := CreateMemberRequestValidationError{
			field:  "NationalIdentifier",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = CreateMemberRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFirstName()) < 1 {
		err := CreateMemberRequestValidationError{
			field:  "FirstName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLastName()) < 1 {
		err := CreateMemberRequestValidationError{
			field:  "LastName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhoneNumber()) < 1 {
		err := CreateMemberRequestValidationError{
			field:  "PhoneNumber",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		err := CreateMemberRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := MemberShipType_name[int32(m.GetMemberShipType())]; !ok {
		err := CreateMemberRequestValidationError{
			field:  "MemberShipType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRenewedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMemberRequestValidationError{
					field:  "RenewedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMemberRequestValidationError{
					field:  "RenewedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRenewedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMemberRequestValidationError{
				field:  "RenewedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOverrideExpirationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMemberRequestValidationError{
					field:  "OverrideExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMemberRequestValidationError{
					field:  "OverrideExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOverrideExpirationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMemberRequestValidationError{
				field:  "OverrideExpirationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMemberRequestMultiError(errors)
	}
	return nil
}

func (m *CreateMemberRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *CreateMemberRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// CreateMemberRequestMultiError is an error wrapping multiple validation
// errors returned by CreateMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type CreateMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMemberRequestMultiError) AllErrors() []error { return m }

// CreateMemberRequestValidationError is the validation error returned by
// CreateMemberRequest.Validate if the designated constraints aren't met.
type CreateMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMemberRequestValidationError) ErrorName() string {
	return "CreateMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMemberRequestValidationError{}

// Validate checks the field values on UpdateMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMemberRequestMultiError, or nil if none found.
func (m *UpdateMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	if err := m._validateEmail(m.GetEmail()); err != nil {
		err = UpdateMemberRequestValidationError{
			field:  "Email",
			reason: "value must be a valid email address",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetFirstName()) < 1 {
		err := UpdateMemberRequestValidationError{
			field:  "FirstName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetLastName()) < 1 {
		err := UpdateMemberRequestValidationError{
			field:  "LastName",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetPhoneNumber()) < 1 {
		err := UpdateMemberRequestValidationError{
			field:  "PhoneNumber",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAddress()) < 1 {
		err := UpdateMemberRequestValidationError{
			field:  "Address",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := MemberShipType_name[int32(m.GetMemberShipType())]; !ok {
		err := UpdateMemberRequestValidationError{
			field:  "MemberShipType",
			reason: "value must be one of the defined enum values",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetRenewedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMemberRequestValidationError{
					field:  "RenewedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMemberRequestValidationError{
					field:  "RenewedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRenewedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMemberRequestValidationError{
				field:  "RenewedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOverrideExpirationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMemberRequestValidationError{
					field:  "OverrideExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMemberRequestValidationError{
					field:  "OverrideExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOverrideExpirationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMemberRequestValidationError{
				field:  "OverrideExpirationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMemberRequestMultiError(errors)
	}
	return nil
}

func (m *UpdateMemberRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

func (m *UpdateMemberRequest) _validateEmail(addr string) error {
	a, err := mail.ParseAddress(addr)
	if err != nil {
		return err
	}
	addr = a.Address

	if len(addr) > 254 {
		return errors.New("email addresses cannot exceed 254 characters")
	}

	parts := strings.SplitN(addr, "@", 2)

	if len(parts[0]) > 64 {
		return errors.New("email address local phrase cannot exceed 64 characters")
	}

	return m._validateHostname(parts[1])
}

// UpdateMemberRequestMultiError is an error wrapping multiple validation
// errors returned by UpdateMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type UpdateMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMemberRequestMultiError) AllErrors() []error { return m }

// UpdateMemberRequestValidationError is the validation error returned by
// UpdateMemberRequest.Validate if the designated constraints aren't met.
type UpdateMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMemberRequestValidationError) ErrorName() string {
	return "UpdateMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMemberRequestValidationError{}

// Validate checks the field values on DeleteMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMemberRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMemberRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMemberRequestMultiError, or nil if none found.
func (m *DeleteMemberRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMemberRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for MemberId

	if len(errors) > 0 {
		return DeleteMemberRequestMultiError(errors)
	}
	return nil
}

// DeleteMemberRequestMultiError is an error wrapping multiple validation
// errors returned by DeleteMemberRequest.ValidateAll() if the designated
// constraints aren't met.
type DeleteMemberRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMemberRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMemberRequestMultiError) AllErrors() []error { return m }

// DeleteMemberRequestValidationError is the validation error returned by
// DeleteMemberRequest.Validate if the designated constraints aren't met.
type DeleteMemberRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMemberRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMemberRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMemberRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMemberRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMemberRequestValidationError) ErrorName() string {
	return "DeleteMemberRequestValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMemberRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMemberRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMemberRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMemberRequestValidationError{}

// Validate checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *Member) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on Member with the rules defined in the
// proto definition for this message. If any rules are violated, the result is
// a list of violation errors wrapped in MemberMultiError, or nil if none found.
func (m *Member) ValidateAll() error {
	return m.validate(true)
}

func (m *Member) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	// no validation rules for Id

	// no validation rules for NationalIdentifier

	// no validation rules for Email

	// no validation rules for FirstName

	// no validation rules for LastName

	// no validation rules for PhoneNumber

	// no validation rules for Address

	// no validation rules for MemberShipType

	if all {
		switch v := interface{}(m.GetRenewedDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "RenewedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "RenewedDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetRenewedDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "RenewedDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetOverrideExpirationDate()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "OverrideExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, MemberValidationError{
					field:  "OverrideExpirationDate",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetOverrideExpirationDate()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return MemberValidationError{
				field:  "OverrideExpirationDate",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	// no validation rules for Status

	if len(errors) > 0 {
		return MemberMultiError(errors)
	}
	return nil
}

// MemberMultiError is an error wrapping multiple validation errors returned by
// Member.ValidateAll() if the designated constraints aren't met.
type MemberMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m MemberMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m MemberMultiError) AllErrors() []error { return m }

// MemberValidationError is the validation error returned by Member.Validate if
// the designated constraints aren't met.
type MemberValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e MemberValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e MemberValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e MemberValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e MemberValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e MemberValidationError) ErrorName() string { return "MemberValidationError" }

// Error satisfies the builtin error interface
func (e MemberValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sMember.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = MemberValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = MemberValidationError{}

// Validate checks the field values on GetMemberResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// first error encountered is returned, or nil if there are no violations.
func (m *GetMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMemberResponseMultiError, or nil if none found.
func (m *GetMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, GetMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, GetMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return GetMemberResponseValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return GetMemberResponseMultiError(errors)
	}
	return nil
}

// GetMemberResponseMultiError is an error wrapping multiple validation errors
// returned by GetMemberResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMemberResponseMultiError) AllErrors() []error { return m }

// GetMemberResponseValidationError is the validation error returned by
// GetMemberResponse.Validate if the designated constraints aren't met.
type GetMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMemberResponseValidationError) ErrorName() string {
	return "GetMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMemberResponseValidationError{}

// Validate checks the field values on UpdateMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *UpdateMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on UpdateMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// UpdateMemberResponseMultiError, or nil if none found.
func (m *UpdateMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *UpdateMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, UpdateMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, UpdateMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return UpdateMemberResponseValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return UpdateMemberResponseMultiError(errors)
	}
	return nil
}

// UpdateMemberResponseMultiError is an error wrapping multiple validation
// errors returned by UpdateMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type UpdateMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m UpdateMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m UpdateMemberResponseMultiError) AllErrors() []error { return m }

// UpdateMemberResponseValidationError is the validation error returned by
// UpdateMemberResponse.Validate if the designated constraints aren't met.
type UpdateMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e UpdateMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e UpdateMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e UpdateMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e UpdateMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e UpdateMemberResponseValidationError) ErrorName() string {
	return "UpdateMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e UpdateMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sUpdateMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = UpdateMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = UpdateMemberResponseValidationError{}

// Validate checks the field values on CreateMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *CreateMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on CreateMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// CreateMemberResponseMultiError, or nil if none found.
func (m *CreateMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *CreateMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, CreateMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, CreateMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return CreateMemberResponseValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return CreateMemberResponseMultiError(errors)
	}
	return nil
}

// CreateMemberResponseMultiError is an error wrapping multiple validation
// errors returned by CreateMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type CreateMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m CreateMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m CreateMemberResponseMultiError) AllErrors() []error { return m }

// CreateMemberResponseValidationError is the validation error returned by
// CreateMemberResponse.Validate if the designated constraints aren't met.
type CreateMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e CreateMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e CreateMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e CreateMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e CreateMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e CreateMemberResponseValidationError) ErrorName() string {
	return "CreateMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e CreateMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sCreateMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = CreateMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = CreateMemberResponseValidationError{}

// Validate checks the field values on DeleteMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *DeleteMemberResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on DeleteMemberResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// DeleteMemberResponseMultiError, or nil if none found.
func (m *DeleteMemberResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *DeleteMemberResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetMember()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, DeleteMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, DeleteMemberResponseValidationError{
					field:  "Member",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetMember()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return DeleteMemberResponseValidationError{
				field:  "Member",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return DeleteMemberResponseMultiError(errors)
	}
	return nil
}

// DeleteMemberResponseMultiError is an error wrapping multiple validation
// errors returned by DeleteMemberResponse.ValidateAll() if the designated
// constraints aren't met.
type DeleteMemberResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m DeleteMemberResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m DeleteMemberResponseMultiError) AllErrors() []error { return m }

// DeleteMemberResponseValidationError is the validation error returned by
// DeleteMemberResponse.Validate if the designated constraints aren't met.
type DeleteMemberResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e DeleteMemberResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e DeleteMemberResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e DeleteMemberResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e DeleteMemberResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e DeleteMemberResponseValidationError) ErrorName() string {
	return "DeleteMemberResponseValidationError"
}

// Error satisfies the builtin error interface
func (e DeleteMemberResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sDeleteMemberResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = DeleteMemberResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = DeleteMemberResponseValidationError{}

// Validate checks the field values on GetMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *GetMembersResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on GetMembersResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// GetMembersResponseMultiError, or nil if none found.
func (m *GetMembersResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *GetMembersResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	for idx, item := range m.GetMembers() {
		_, _ = idx, item

		if all {
			switch v := interface{}(item).(type) {
			case interface{ ValidateAll() error }:
				if err := v.ValidateAll(); err != nil {
					errors = append(errors, GetMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			case interface{ Validate() error }:
				if err := v.Validate(); err != nil {
					errors = append(errors, GetMembersResponseValidationError{
						field:  fmt.Sprintf("Members[%v]", idx),
						reason: "embedded message failed validation",
						cause:  err,
					})
				}
			}
		} else if v, ok := interface{}(item).(interface{ Validate() error }); ok {
			if err := v.Validate(); err != nil {
				return GetMembersResponseValidationError{
					field:  fmt.Sprintf("Members[%v]", idx),
					reason: "embedded message failed validation",
					cause:  err,
				}
			}
		}

	}

	if len(errors) > 0 {
		return GetMembersResponseMultiError(errors)
	}
	return nil
}

// GetMembersResponseMultiError is an error wrapping multiple validation errors
// returned by GetMembersResponse.ValidateAll() if the designated constraints
// aren't met.
type GetMembersResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m GetMembersResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m GetMembersResponseMultiError) AllErrors() []error { return m }

// GetMembersResponseValidationError is the validation error returned by
// GetMembersResponse.Validate if the designated constraints aren't met.
type GetMembersResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e GetMembersResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e GetMembersResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e GetMembersResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e GetMembersResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e GetMembersResponseValidationError) ErrorName() string {
	return "GetMembersResponseValidationError"
}

// Error satisfies the builtin error interface
func (e GetMembersResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sGetMembersResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = GetMembersResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = GetMembersResponseValidationError{}
